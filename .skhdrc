# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

alt - q : $(yabai -m window $(yabai -m query --windows --window | jq -re ".id") --close)

# focus window
# alt - h : yabai -m window --focus west
alt - h : yabai -m window --focus west; xx="$(echo $?)"; [[ "$xx" = "1" ]] && yabai -m display --focus next
# alt - l : yabai -m window --focus east
alt - l : yabai -m window --focus east; xx="$(echo $?)"; [[ "$xx" = "1" ]] && yabai -m display --focus prev
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north

# swap managed window
# shift + alt - h : yabai -m window --swap west
shift + alt - h: yabai -m window --swap west; xx="$(echo $?)"; [[ "$xx" = '1' ]] && sh $HOME/scripts/yabai/moveWindowLeftAndFollowFocus
# shift + alt - l : yabai -m window --swap east
shift + alt - l: yabai -m window --swap east; xx="$(echo $?)"; [[ "$xx" = '1' ]] && sh $HOME/scripts/yabai/moveWindowRightAndFollowFocus
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north

# balance size of windows
shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
shift + cmd - n : yabai -m space --create && \
                  index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
                  yabai -m window --space "${index}" && \
                  yabai -m space --focus "${index}"

# fast focus desktop
# cmd + alt - 1 : yabai -m space --focus 1
# cmd + alt - 2 : yabai -m space --focus 2
# cmd + alt - 3 : yabai -m space --focus 3
# cmd + alt - 4 : yabai -m space --focus 4

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
hyper - 1  : yabai -m display --focus 1
hyper - 2  : yabai -m display --focus 2
hyper - 3  : yabai -m display --focus 3
hyper - 2  : yabai -m display --focus 4

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

#Move active window to next space on current display
shift + lalt + lcmd + ctrl + ralt - 1 : yabai -m query --spaces --space | jq -re ".index" | xargs -I {} bash -c "if [[ '{}' = '1' ]]; then yabai -m window --space 2; elif [[ '{}' = '2' ]]; then yabai -m window --space 1; fi"
shift + lalt + lcmd + ctrl + ralt - 2 : yabai -m query --spaces --space | jq -re ".index" | xargs -I {} bash -c "if [[ '{}' = '3' ]]; then yabai -m window --space 4; elif [[ '{}' = '4' ]]; then yabai -m window --space 3; fi"
shift + lalt + lcmd + ctrl + ralt - 3 : yabai -m query --spaces --space | jq -re ".index" | xargs -I {} bash -c "if [[ '{}' = '5' ]]; then yabai -m window --space 6; elif [[ '{}' = '6' ]]; then yabai -m window --space 5; fi"

# move floating window
ctrl + alt - h : yabai -m window --move rel:-20:0
ctrl + alt - l : yabai -m window --move rel:20:0
ctrl + alt - k : yabai -m window --move rel:0:-20
ctrl + alt - j : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-17:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
alt - s : yabai -m window --toggle split

# float / unfloat window and center on screen
alt - space : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip

## rotate tree 90
hyper - r : yabai -m space --rotate 90
## flip the tree vertically
hyper - y : yabai -m space --mirror y-axis

# Normal i3 configuration
# Open Terminal of choice
hyper - return : open -na Alacritty

# Open Browser of choice
hyper - p : open -na FireFox

# Open Alfred
alt - d : open -a /Applications/Alfred\ 4.app

alt + shift - s: yabai -m window --stack next

# Stack Surfing
alt - u: yabai -m window --focus stack.next || yabai -m window --focus stack.first

# go to each window WITHOUT going into a stack
ctrl + alt + cmd + lshift - h : yabai -m query --spaces | jq -re ".[] | select(.visible == 1).index" | xargs -I{} yabai -m query --windows --space {} | jq -re "[.[] | select(.app != \"Hammerspoon\")]" | jq -sre "add | sort_by(.display, .frame.x, .frame.y, .id) | nth(index(map(select(.focused == 1))) - 1).id" | xargs -I{} yabai -m window --focus {}
# go to each window WITHOUT going into a stack
ctrl + alt + cmd + lshift - l : yabai -m query --spaces | jq -re ".[] | select(.visible == 1).index" | xargs -I{} yabai -m query --windows --space {} | jq -re "[.[] | select(.app != \"Hammerspoon\")]" | jq -sre "add | sort_by(.display, .frame.x, .frame.y, .id) | reverse | nth(index(map(select(.focused == 1))) - 1).id" | xargs -I{} yabai -m window --focus {}
